These are a few quick guidelines about how the libason API is organized.
This should serve as a reference going forward, and get users up to speed with
conventions.

===============================================================================
1. ason_t * points to an immutable object.
===============================================================================

This is the most important feature of the API and lets us both keep memory
management simple and prevent having to make life-cycle management too weird.

Basically the rule is as follows: if you have two values 'a' and 'b' of type
'ason_t *' and 'ason_check_equal(a, b)' returns true, it will always return
true for the entire life-cycle of those pointers. You can basically treat every
ason_t pointer returned from the library as pointing to a unique object whose
value (in an ASON sense) will never change. This means every ason operation
returns a new object which must individually be passed to ason_destroy(), so
beware.

Please note that this does NOT mean that the objects are actually not changing.
ASON is allowed to reorganize the structure of an object AT ANY TIME so long as
it represents the same value in an ASON sense. Also, examination may reveal
libason returning the same pointer in multiple places. DO NOT LOOK AT THE
POINTERS. Semantically every ason_t * BEHAVES like a pointer to a distinct,
immutable ASON value.

===============================================================================
2. Strings returned from libason are new strings.
===============================================================================

This one is a bit simpler. If libason returns you a string, it is generally a
new string which must be freed by calling free(). The inconvenience here is
offset by not having any of the weirder errors that can come from passing
buffers around, and not referencing our internal strings helps us preserve rule
#1.

===============================================================================
3. ason_foo_d is like ason_foo but destroys its arguments
===============================================================================

When there is a function named ason_foo and a function named ason_foo_d, then
ason_foo_d is assumed to do the same thing as ason_foo, but it will call
ason_destroy() on all of its arguments of type ason_t. Note that these
functions typically WILL NOT free strings or other arguments passed.

This is a space saving function. Consider this example without the use of _d:

	ason_t *a = ason_create_number(6);
	ason_t *b = ason_create_number(7);
	ason_t *c = ason_intersect(a, b);

	ason_destroy(a);
	ason_destroy(b);

versus this one with:

	ason_t *a = ason_create_number(6);
	ason_t *b = ason_create_number(7);
	ason_t *c = ason_intersect_d(a, b);

There is already a 2-line savings, and this is a relatively simple example.
When a value's only purpose is to be rolled in to another object, ason_*_d
saves dramatic amounts of effort.
